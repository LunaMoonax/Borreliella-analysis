import glob
import os

samples = {
    "B_afzelii_PKo": {"strain": "PKo", "species": "Borrelia afzelii", "genus": "Borrelia"},
    "B_burgdorferi_PAbe": {"strain": "PAbe", "species": "Borrelia burgdorferi", "genus": "Borrelia"},
    "B_bavariensis_PBi": {"strain": "PBi", "species": "Borrelia bavariensis", "genus": "Borrelia"},
    "B_garinii_PBes": {"strain": "PBes", "species": "Borrelia garinii", "genus": "Borrelia"}
}

contaminants = ["Ixodes", "Midichloria", "Rickettsiella", "Spiroplasma"]

rule all:
    input:
        expand("/scratch/lustre/home/vira9982/Borreliella_target/genomes/{sample}/{sample}_prokka/{sample}.gff", sample=samples.keys()),
        "results/panaroo/core_gene_alignment.aln",
        "results/panaroo/gene_presence_absence.csv",
        expand("results/blastdb/{contaminant}.nin", contaminant=contaminants),
        expand("results/blast/{contaminant}.tsv", contaminant=contaminants),
        "results/clean_core_genes.txt",
        "results/panaroo/filtered_core_genes.fa",
        "results/tigr_grna_18mers.tsv",
        "results/blast/tigr/all_hits.tsv",
        "results/final_filtered_tigr_grna.tsv"

rule prokka:
    input:
        fasta = lambda wc: f"/scratch/lustre/home/vira9982/Borreliella_target/genomes/{wc.sample}/{wc.sample}.fna"
    output:
        gff = "/scratch/lustre/home/vira9982/Borreliella_target/genomes/{sample}/{sample}_prokka/{sample}.gff"
    params:
        outdir = lambda wc: f"/scratch/lustre/home/vira9982/Borreliella_target/genomes/{wc.sample}/{wc.sample}_prokka",
        prefix = lambda wc: wc.sample,
        genus = lambda wc: samples[wc.sample]["genus"],
        species = lambda wc: samples[wc.sample]["species"],
        strain = lambda wc: samples[wc.sample]["strain"]
    threads: 4
    conda: "envs/borrelia-env.yaml"
    shell:
        """
        prokka {input.fasta} \
            --outdir {params.outdir} \
            --prefix {params.prefix} \
            --genus "{params.genus}" \
            --species "{params.species}" \
            --strain "{params.strain}" \
            --usegenus \
            --cpus {threads} \
            --force
        """

rule panaroo:
    input:
        gff = expand("/scratch/lustre/home/vira9982/Borreliella_target/genomes/{sample}/{sample}_prokka/{sample}.gff", sample=samples.keys())
    output:
        aln = "results/panaroo/core_gene_alignment.aln",
        genes = "results/panaroo/gene_presence_absence.csv",
        ref = "results/panaroo/pan_genome_reference.fa"
    threads: 4
    conda: "envs/borrelia-env.yaml"
    shell:
        """
        panaroo -i {input.gff} -o results/panaroo --clean-mode strict \
        -a core --aligner mafft -t {threads}
        """

rule make_blast_db:
    input:
        fasta = "/scratch/lustre/home/vira9982/Borreliella_target/genomes/{contaminant}/{contaminant}.fna"
    output:
        db = "results/blastdb/{contaminant}.nin"
    shell:
        """
        makeblastdb -in {input.fasta} -dbtype nucl -out results/blastdb/{wildcards.contaminant}
        """

rule blast_core_genes:
    input:
        query = "results/panaroo/pan_genome_reference.fa",
        db = "results/blastdb/{contaminant}.nin"
    output:
        "results/blast/{contaminant}.tsv"
    shell:
        """
        blastn -query {input.query} -db results/blastdb/{wildcards.contaminant} \
        -evalue 1 -outfmt 6 -out {output}
        """

rule filter_clean_genes:
    input:
        core_genes = "results/panaroo/pan_genome_reference.fa",
        blast_hits = expand("results/blast/{contaminant}.tsv", contaminant=contaminants)
    output:
        "results/clean_core_genes.txt"
    run:
        contaminated = set()
        for blast_file in input.blast_hits:
            with open(blast_file) as f:
                for line in f:
                    contaminated.add(line.strip().split("\t")[0])
        with open(input.core_genes) as fasta, open(output[0], "w") as out:
            for line in fasta:
                if line.startswith(">"):
                    gene = line.strip()[1:]
                    if gene not in contaminated:
                        out.write(gene + "\n")

rule extract_clean_sequences:
    input:
        genes = "results/clean_core_genes.txt",
        fasta = "results/panaroo/pan_genome_reference.fa"
    output:
        "results/panaroo/filtered_core_genes.fa"
    run:
        from Bio import SeqIO
        with open(input.genes) as f:
            keep = set(line.strip() for line in f)
        with open(output[0], "w") as out_fa:
            for record in SeqIO.parse(input.fasta, "fasta"):
                if record.id in keep:
                    SeqIO.write(record, out_fa, "fasta")


