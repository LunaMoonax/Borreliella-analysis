import glob
import os

samples = {
    "B_afzelii_PKo": "Borrelia",
    "B_afzelii_BO23": "Borrelia",
    "B_afzelii_K78": "Borrelia",
    "B_afzelii_Tom3107": "Borrelia",
    "B_burgdorferi_PAbe": "Borrelia",
    "B_burgdorferi_B31": "Borrelia",
    "B_burgdorferi_NE5248": "Borrelia",
    "B_burgdorferi_PFheI": "Borrelia",
    "B_bavariensis_PBi": "Borrelia",
    "B_bavariensis_PBaell": "Borrelia",
    "B_bavariensis_NT24": "Borrelia",
    "B_garinii_PBes": "Borrelia",
    "B_garinii_20047": "Borrelia",
    "B_garinii_BgVir": "Borrelia",
    "B_garinii_NT31": "Borrelia",
    "B_divergens_1802A": "Babesia",
    "B_divergens_Rouen1987": "Babesia",
    "B_duncani_WA1": "Babesia",
    "B_microti_RI": "Babesia"
}

contaminants = {
    "Ixodes_CAYQID01": "Ixodes",
    "Ixodes_CharlesRiver": "Ixodes",
    "Ixodes_Maya1009": "Ixodes",
    "Ixodes_Murphy0812": "Ixodes",
    "Ixodes_PV-2024": "Ixodes",
    "Midichloria_Ird3Mm": "Midichloria",
    "Midichloria_IricVA": "Midichloria",
    "Rickettsiella_32cd738c": "Rickettsiella",
    "Rickettsiella_54705": "Rickettsiella",
    "Rickettsiella_54706": "Rickettsiella",
    "Rickettsiella_54707": "Rickettsiella",
    "Rickettsiella_63004e16": "Rickettsiella",
    "Rickettsiella_Ap-RA04": "Rickettsiella",
    "Rickettsiella_DGE": "Rickettsiella",
    "Spiroplasma_SHM": "Spiroplasma",
    "Spiroplasma_Y32": "Spiroplasma",
    "Spiroplasma_sAp269": "Spiroplasma"
}

borrelia_samples = {sample: group for sample, group in samples.items() if group == "Borrelia"}
#babesia_samples = {sample: group for sample, group in samples.items() if group == "Babesia"}

rule all:
    input:
        "results/parsnp_Borrelia/parsnp/parsnp.xmfa",
        "results/parsnp_Borrelia/parsnp/parsnp.tree",
        "results/rpa/candidates.csv",
        "results/rpa/RPA_primers.csv",
        "results/rpa/RPA_primers_valid_only.csv",
        "results/rpa/contamination_check/synthesis_ready_primers.csv"
rule parsnp:
    input:
        reference_genome = "/scratch/lustre/home/vira9982/Borreliella_target/genomes/Borrelia/B_afzelii_Tom3107/B_afzelii_Tom3107.fna",
        genome_files = expand(
            "/scratch/lustre/home/vira9982/Borreliella_target/genomes/Borrelia/{sample}/{sample}.fna",
            sample=[s for s in borrelia_samples if s != "B_afzelii_Tom3107"]
        )
    output:
        xmfa = "results/parsnp_Borrelia/parsnp/parsnp.xmfa",
        tree = "results/parsnp_Borrelia/parsnp/parsnp.tree",
        ggr = "results/parsnp_Borrelia/parsnp/parsnp.ggr"
    params:
        output_dir = "results/parsnp_Borrelia/parsnp",
        genomes_dir = "results/parsnp_Borrelia/genomes"
    threads: 8
    conda: "envs/target_search.yaml"
    shell:
        """
        mkdir -p {params.genomes_dir}
        
        # Remove only existing symlinks or broken links, not the directory itself
        find {params.genomes_dir} -type l -delete

        # Symlink non-reference genome files
        for genome in {input.genome_files}; do
            ln -sf $(realpath $genome) {params.genomes_dir}/
        done

        echo "Final contents of {params.genomes_dir}:"
        ls -lh {params.genomes_dir}

        # Run Parsnp
        parsnp -r {input.reference_genome} -d {params.genomes_dir} -p {threads} -o {params.output_dir} --fo
        """

rule extract_conserved_targets:
    input:
        xmfa = "results/parsnp_Borrelia/parsnp/parsnp.xmfa"
    output:
        csv = "results/rpa/candidates.csv"
    shell:
        """
        python scripts/extract_target_primers.py {input.xmfa} {output.csv}
        """

rule validate_ultra_strict_rpa_primers:
    input:
        candidates = "results/rpa/candidates.csv"
    output:
        primers = "results/rpa/RPA_primers.csv",
        valid_primers = "results/rpa/RPA_primers_valid_only.csv"
    conda: "envs/target_search.yaml"
    shell:
        """
        # Use validate_primers.py script (the ultra-strict validator)
        python scripts/validate_primers.py {input.candidates} {output.primers}
        """

rule create_contamination_db:
    input:
        contaminant_genomes = expand(
            "/scratch/lustre/home/vira9982/Borreliella_target/genomes/contaminants/{genus}/{sample}.fna",
            zip,
            genus=[contaminants[sample] for sample in contaminants.keys()],
            sample=contaminants.keys()
        )
    output:
        combined_db = "results/rpa/contamination_db/contaminants.fasta",
        blast_db = "results/rpa/contamination_db/contaminants.ndb"
    params:
        db_prefix = "results/rpa/contamination_db/contaminants"
    conda: "envs/target_search.yaml"
    shell:
        """
        mkdir -p results/rpa/contamination_db
        
        # Combine all contaminant genomes
        cat {input.contaminant_genomes} > {output.combined_db}
        
        # Create BLAST database
        makeblastdb -in {output.combined_db} -dbtype nucl -out {params.db_prefix}
        """

rule check_ultra_strict_contamination:
    input:
        # Use the main output from validate_primers.py (contains all primers)
        valid_primers = "results/rpa/RPA_primers_valid_only.csv",
        blast_db = "results/rpa/contamination_db/contaminants.ndb"
    output:
        synthesis_ready = "results/rpa/contamination_check/synthesis_ready_primers.csv"
    params:
        output_dir = "results/rpa/contamination_check",
        db_prefix = "results/rpa/contamination_db/contaminants",
        temp_work_dir = "/tmp/blast_contamination_work_$$"
    conda: "envs/target_search.yaml"
    shell:
        """
        # Use simple_contamination_check.py script
        mkdir -p {params.output_dir}
        python scripts/simple_contamination_check.py \
            --input {input.valid_primers} \
            --database {params.db_prefix} \
            --output {output.synthesis_ready} \
            --work-dir {params.temp_work_dir} \
        """