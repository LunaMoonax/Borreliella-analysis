import glob
import os

samples = {
    "B_afzelii_PKo": "Borrelia",
    "B_afzelii_BO23": "Borrelia",
    "B_afzelii_K78": "Borrelia",
    "B_afzelii_Tom3107": "Borrelia",
    "B_burgdorferi_PAbe": "Borrelia",
    "B_burgdorferi_B31": "Borrelia",
    "B_burgdorferi_NE5248": "Borrelia",
    "B_burgdorferi_PFheI": "Borrelia",
    "B_bavariensis_PBi": "Borrelia",
    "B_bavariensis_PBaell": "Borrelia",
    "B_bavariensis_NT24": "Borrelia",
    "B_garinii_PBes": "Borrelia",
    "B_garinii_20047": "Borrelia",
    "B_garinii_BgVir": "Borrelia",
    "B_garinii_NT31": "Borrelia",
    "B_divergens_CCSG02": "Babesia",
    "B_divergens_JAHBMH01": "Babesia",
    "B_duncani_WA1": "Babesia",
    "B_microti_RI": "Babesia"
}

contaminants = {
    "Ixodes_CAYQID01": "Ixodes",
    "Ixodes_CharlesRiver": "Ixodes",
    "Ixodes_Maya1009": "Ixodes",
    "Ixodes_Murphy0812": "Ixodes",
    "Ixodes_PV-2024": "Ixodes",
    "Midichloria_Ird3Mm": "Midichloria",
    "Midichloria_IricVA": "Midichloria",
    "Rickettsiella_32cd738c": "Rickettsiella",
    "Rickettsiella_54705": "Rickettsiella",
    "Rickettsiella_54706": "Rickettsiella",
    "Rickettsiella_54707": "Rickettsiella",
    "Rickettsiella_63004e16": "Rickettsiella",
    "Rickettsiella_Ap-RA04": "Rickettsiella",
    "Rickettsiella_DGE": "Rickettsiella",
    "Spiroplasma_SHM": "Spiroplasma",
    "Spiroplasma_Y32": "Spiroplasma",
    "Spiroplasma_sAp269": "Spiroplasma"
}

sample_genus_pairs = [(s, g) for s, g in samples.items()]
borrelia_samples = [s for s, g in sample_genus_pairs if g == "Borrelia"]
babesia_samples = [s for s, g in sample_genus_pairs if g == "Babesia"]
contaminant_pairs = [(strain, group) for strain, group in contaminants.items()]
contaminant_strains = [s for s, _ in contaminant_pairs]

rule all:
    input:
        expand("/scratch/lustre/home/vira9982/Borreliella_target/genomes/{genus}/{sample}/{sample}_prokka/{sample}.gff",
               zip, sample=[s for s, g in sample_genus_pairs], genus=[g for s, g in sample_genus_pairs]),
        "results/panaroo/core_gene_alignment_filtered.aln",
        "results/tigr_grna_18mers.tsv",
        "results/panaroo/conserved_18mers.fa",
        expand("results/blastdb/{strain}.nin", strain=babesia_samples + contaminant_strains),
        "results/blast/tigr/babesia_hits.tsv",
        "results/shared_tigr_grna.tsv",
        "results/blast/tigr/contaminant_hits.tsv",
        "results/final_filtered_tigr_grna.tsv",
        "results/tigr_grna_summary.txt"

rule prokka:
    input:
        fasta = "/scratch/lustre/home/vira9982/Borreliella_target/genomes/{genus}/{sample}/{sample}.fna"
    output:
        gff = "/scratch/lustre/home/vira9982/Borreliella_target/genomes/{genus}/{sample}/{sample}_prokka/{sample}.gff"
    params:
        outdir = "/scratch/lustre/home/vira9982/Borreliella_target/genomes/{genus}/{sample}/{sample}_prokka"
    threads: 4
    conda: "envs/borrelia-env.yaml"
    shell:
        """
        prokka {input.fasta} \
            --outdir {params.outdir} \
            --prefix {wildcards.sample} \
            --genus {wildcards.genus} \
            --cpus {threads} \
            --usegenus --force
        """

rule panaroo:
    input:
        gffs = expand("/scratch/lustre/home/vira9982/Borreliella_target/genomes/Borrelia/{sample}/{sample}_prokka/{sample}.gff", sample=borrelia_samples)
    output:
        aln = "results/panaroo/core_gene_alignment.aln",
        genes = "results/panaroo/gene_presence_absence.csv",
        filtered = "results/panaroo/core_gene_alignment_filtered.aln"
    threads: 4
    conda: "envs/borrelia-env.yaml"
    shell:
        """
        panaroo -i {input.gffs} -o results/panaroo --clean-mode strict \
            -a core --aligner mafft -t {threads}
        """
        
rule extract_tigr_grna:
    input:
        aln = "results/panaroo/core_gene_alignment_filtered.aln"
    output:
        grna = "results/tigr_grna_18mers.tsv"
    run:
        from Bio import AlignIO
        import re

        def is_valid_seed(spacer):
            seed = spacer[3:6]
            return all(base in "ACGT" for base in seed)

        def gc_content(seq):
            gc = sum(1 for base in seq if base in "GC")
            return gc / len(seq)

        def is_good_sequence(seq):
            if not set(seq).issubset(set("ACGT")):
                return False
            if gc_content(seq) < 0.35 or gc_content(seq) > 0.65:
                return False
            if re.search(r'(A{4,}|T{4,}|C{4,}|G{4,})', seq):
                return False
            return True

        alignment = AlignIO.read(input.aln, "fasta")
        aln_len = alignment.get_alignment_length()

        print(f"Total alignment length: {aln_len}")
        print(f"Number of genomes: {len(alignment)}")

        total_windows = 0
        gap_filtered = 0
        conserved = 0
        passed_seed = 0
        passed_gc = 0
        written = 0

        with open(output.grna, "w") as out:
            out.write("gene_id\tstart\tspacerA\tspacerB\tcombined_18mer\n")

            for i in range(aln_len - 17):
                total_windows += 1
                window_seqs = [str(rec.seq[i:i+18]).upper() for rec in alignment]

                if any("-" in seq for seq in window_seqs):
                    gap_filtered += 1
                    continue

                if len(set(window_seqs)) != 1:
                    conserved += 1
                    continue

                tig = window_seqs[0]
                spacerA = tig[:9]
                spacerB = tig[9:]

                if not (is_valid_seed(spacerA) and is_valid_seed(spacerB)):
                    continue
                passed_seed += 1

                if not is_good_sequence(tig):
                    continue
                passed_gc += 1

                out.write(f"conserved_block\t{i+1}\t{spacerA}\t{spacerB}\t{tig}\n")
                written += 1

        print("=== TIGR gRNA Extraction Report ===")
        print(f"Total 18-mer windows scanned: {total_windows}")
        print(f"Skipped due to gaps: {gap_filtered}")
        print(f"Skipped due to non-conservation: {conserved}")
        print(f"Passed seed region filter: {passed_seed}")
        print(f"Passed GC/homopolymer filter: {passed_gc}")
        print(f"Written to file: {written}")


rule build_conserved_18mer_fasta:
    input:
        grna = "results/tigr_grna_18mers.tsv"
    output:
        fa = "results/panaroo/conserved_18mers.fa"
    run:
        with open(input.grna) as tsv, open(output.fa, "w") as out:
            next(tsv)
            for line in tsv:
                fields = line.strip().split("\t")
                out.write(f">{fields[0]}_{fields[1]}\n{fields[4]}\n")

rule make_blast_db_babesia:
    input:
        fasta = lambda wc: f"/scratch/lustre/home/vira9982/Borreliella_target/genomes/Babesia/{wc.strain}/{wc.strain}.fna"
    output:
        db = "results/blastdb/{strain}.nin"
    shell:
        """
        makeblastdb -in {input.fasta} -dbtype nucl -out results/blastdb/{wildcards.strain}
        """

rule blast_tigr_grna_babesia:
    input:
        grna = "results/panaroo/conserved_18mers.fa",
        dbs = expand("results/blastdb/{strain}.nin", strain=babesia_samples)
    output:
        "results/blast/tigr/babesia_hits.tsv"
    run:
        import subprocess
        from pathlib import Path
        grna_fa = input.grna
        all_hits = ""
        for db_path in input.dbs:
            cmd = f"blastn -query {grna_fa} -db {db_path[:-4]} -task blastn-short -word_size 7 -perc_identity 95 -evalue 1e-3 -outfmt 6"
            hits = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            all_hits += hits.stdout
        Path("results/blast/tigr").mkdir(parents=True, exist_ok=True)
        with open(output[0], "w") as out:
            out.write(all_hits)

rule select_shared_tigr_grna_with_babesia:
    input:
        grna = "results/tigr_grna_18mers.tsv",
        babesia_hits = "results/blast/tigr/babesia_hits.tsv"
    output:
        "results/shared_tigr_grna.tsv"
    run:
        from collections import defaultdict

        # Track which gRNAs matched which Babesia strain
        hit_map = defaultdict(set)

        with open(input.babesia_hits) as f:
            for line in f:
                fields = line.strip().split("\t")
                query = fields[0]  # gRNA ID (e.g. conserved_block_3_103)
                db = fields[1]     # subject ID â€” includes strain info
                hit_map[query].add(db)

        # Count how many unique Babesia strains
        expected_strains = set(s.replace("results/blastdb/", "").replace(".nin", "") for s in babesia_samples)

        # Determine which gRNAs matched all strains
        shared = set()
        for grna_id, strains in hit_map.items():
            if len(strains) == len(babesia_samples):
                shared.add(grna_id)

        with open(input.grna) as grna_in, open(output[0], "w") as out:
            header = grna_in.readline()
            out.write(header)
            for line in grna_in:
                gid = line.split("\t")[0] + "_" + line.split("\t")[1]
                if gid in shared:
                    out.write(line)         

rule make_blast_db:
    input:
        fasta = lambda wc: f"/scratch/lustre/home/vira9982/Borreliella_target/genomes/contaminants/{contaminants[wc.strain]}/{wc.strain}.fna"
    output:
        db = "results/blastdb/{strain}.nin"
    shell:
        """
        makeblastdb -in {input.fasta} -dbtype nucl -out results/blastdb/{wildcards.strain}
        """

rule blast_shared_grna_against_contaminants:
    input:
        grna = "results/shared_tigr_grna.tsv",
        dbs = expand("results/blastdb/{strain}.nin", strain=contaminant_strains)
    output:
        "results/blast/tigr/contaminant_hits.tsv"
    run:
        import subprocess
        from pathlib import Path

        fasta_file = "results/shared_18mers_temp.fa"
        with open(input.grna) as tsv, open(fasta_file, "w") as out:
            next(tsv)
            for line in tsv:
                fields = line.strip().split("\t")
                out.write(f">{fields[0]}_{fields[1]}\n{fields[4]}\n")

        all_hits = ""
        for db_path in input.dbs:
            cmd = f"blastn -query {fasta_file} -db {db_path[:-4]} -task blastn-short -word_size 7 -perc_identity 90 -evalue 1e-2 -outfmt 6"
            hits = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            all_hits += hits.stdout

        Path("results/blast/tigr").mkdir(parents=True, exist_ok=True)
        with open(output[0], "w") as out:
            out.write(all_hits)

rule filter_tigr_grna_hits:
    input:
        grna = "results/shared_tigr_grna.tsv",
        hits = "results/blast/tigr/contaminant_hits.tsv"
    output:
        "results/final_filtered_tigr_grna.tsv"
    run:
        contaminated = set()
        with open(input.hits) as f:
            for line in f:
                query = line.split("\t")[0]
                contaminated.add(query)
        with open(input.grna) as grna_in, open(output[0], "w") as out:
            header = grna_in.readline()
            out.write(header)
            for line in grna_in:
                gid = line.split("\t")[0] + "_" + line.split("\t")[1]
                if gid not in contaminated:
                    out.write(line)

rule summarize_grnas:
    input:
        all_grnas = "results/shared_tigr_grna.tsv",
        filtered = "results/final_filtered_tigr_grna.tsv"
    output:
        "results/tigr_grna_summary.txt"
    run:
        with open(input.all_grnas) as a:
            total = sum(1 for _ in a) - 1
        with open(input.filtered) as f:
            final = sum(1 for _ in f) - 1
        with open(output[0], "w") as out:
            out.write(f"Total gRNA candidates: {total}\n")
            out.write(f"Filtered (contaminants removed): {final}\n")
