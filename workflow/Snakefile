import glob
import os

samples = {
    "B_afzelii_PKo": "Borrelia",
    "B_afzelii_BO23": "Borrelia",
    "B_afzelii_K78": "Borrelia",
    "B_afzelii_Tom3107": "Borrelia",
    "B_burgdorferi_PAbe": "Borrelia",
    "B_burgdorferi_B31": "Borrelia",
    "B_burgdorferi_NE5248": "Borrelia",
    "B_burgdorferi_PFheI": "Borrelia",
    "B_bavariensis_PBi": "Borrelia",
    "B_bavariensis_PBaell": "Borrelia",
    "B_bavariensis_NT24": "Borrelia",
    "B_garinii_PBes": "Borrelia",
    "B_garinii_20047": "Borrelia",
    "B_garinii_BgVir": "Borrelia",
    "B_garinii_NT31": "Borrelia",
    "B_divergens_1802A": "Babesia",
    "B_divergens_Rouen1987": "Babesia",
    "B_duncani_WA1": "Babesia",
    "B_microti_RI": "Babesia"
}

contaminants = {
    "Ixodes_CAYQID01": "Ixodes",
    "Ixodes_CharlesRiver": "Ixodes",
    "Ixodes_Maya1009": "Ixodes",
    "Ixodes_Murphy0812": "Ixodes",
    "Ixodes_PV-2024": "Ixodes",
    "Midichloria_Ird3Mm": "Midichloria",
    "Midichloria_IricVA": "Midichloria",
    "Rickettsiella_32cd738c": "Rickettsiella",
    "Rickettsiella_54705": "Rickettsiella",
    "Rickettsiella_54706": "Rickettsiella",
    "Rickettsiella_54707": "Rickettsiella",
    "Rickettsiella_63004e16": "Rickettsiella",
    "Rickettsiella_Ap-RA04": "Rickettsiella",
    "Rickettsiella_DGE": "Rickettsiella",
    "Spiroplasma_SHM": "Spiroplasma",
    "Spiroplasma_Y32": "Spiroplasma",
    "Spiroplasma_sAp269": "Spiroplasma"
}

borrelia_samples = {sample: group for sample, group in samples.items() if group == "Borrelia"}
babesia_samples = {sample: group for sample, group in samples.items() if group == "Babesia"}

rule all:
    input:
        "results/parsnp_Borrelia/parsnp/parsnp.xmfa",
        "results/parsnp_Borrelia/parsnp/parsnp.tree",
        "results/parsnp_Borrelia/parsnp/parsnp.ggr",
        "results/parsnp_Borrelia/core_borrelia_reference.fasta",
        expand("results/mummer/{sample}/align.filtered.delta", sample=babesia_samples.keys()),
        expand("results/mummer/{sample}/align.coords", sample=babesia_samples.keys())

rule parsnp:
    input:
        reference_genome = "/scratch/lustre/home/vira9982/Borreliella_target/genomes/Borrelia/B_afzelii_Tom3107/B_afzelii_Tom3107.fna",
        genome_files = expand(
            "/scratch/lustre/home/vira9982/Borreliella_target/genomes/Borrelia/{sample}/{sample}.fna",
            sample=[s for s in borrelia_samples if s != "B_afzelii_Tom3107"]
        )
    output:
        xmfa = "results/parsnp_Borrelia/parsnp/parsnp.xmfa",
        tree = "results/parsnp_Borrelia/parsnp/parsnp.tree",
        ggr = "results/parsnp_Borrelia/parsnp/parsnp.ggr"
    params:
        output_dir = "results/parsnp_Borrelia/parsnp",
        genomes_dir = "results/parsnp_Borrelia/genomes"
    threads: 8
    conda: "envs/target_search.yaml"
    shell:
        """
        mkdir -p {params.genomes_dir}
        
        # Remove only existing symlinks or broken links, not the directory itself
        find {params.genomes_dir} -type l -delete

        # Symlink non-reference genome files
        for genome in {input.genome_files}; do
            ln -sf $(realpath $genome) {params.genomes_dir}/
        done

        echo "Final contents of {params.genomes_dir}:"
        ls -lh {params.genomes_dir}

        # Run Parsnp
        parsnp -r {input.reference_genome} -d {params.genomes_dir} -p {threads} -o {params.output_dir} --fo
        """

rule xmfa_to_fasta:
    input:
        xmfa = "results/parsnp_Borrelia/parsnp/parsnp.xmfa"
    output:
        fasta = "results/parsnp_Borrelia/core_borrelia_reference.fasta"
    script:
        "scripts/xmfa_to_core_fasta.py"

rule mummer_align_babesia:
    input:
        ref = "results/parsnp_Borrelia/core_borrelia_reference.fasta",
        query = "/scratch/lustre/home/vira9982/Borreliella_target/genomes/Babesia/{sample}/{sample}.fna"
    output:
        delta = "results/mummer/{sample}/align.filtered.delta",
        coords = "results/mummer/{sample}/align.coords"
    params:
        prefix = "results/mummer/{sample}/align"
    threads: 8
    shell:
        """
        mkdir -p results/mummer/{wildcards.sample}

        nucmer --maxmatch --nosimplify --minmatch=18 --mincluster=18 -p {params.prefix} {input.ref} {input.query}

        delta-filter -i 100 -l 18 {params.prefix}.delta > {output.delta}

        show-coords -rcl -T {output.delta} > {output.coords}
        """
