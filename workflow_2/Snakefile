import os

RICKETTSIA_GENOMES_DIR = "/scratch/lustre/home/vira9982/Borreliella_target/genomes/Rickettsia/"

RICKETTSIA_SPECIES = [
    os.path.splitext(f)[0]
    for f in os.listdir(RICKETTSIA_GENOMES_DIR)
    if f.endswith(".fna")
]

RICKETTSIA_REFERENCE_GENOME = "Rickettsia_prowazekii"

if not RICKETTSIA_REFERENCE_GENOME:
    raise Exception(f"Nerasta .fna failų {RICKETTSIA_GENOMES_DIR} kataloge. Patikrinkite kelią ir failų plėtinius.")

OUTPUT_ROOT_DIR = "results/"
PROKKA_OUTPUT_DIR = f"{OUTPUT_ROOT_DIR}prokka_annotations/"
PROKKA_GFF_FILES = expand(
    f"{PROKKA_OUTPUT_DIR}{{species}}/{{species}}.gff",
    species=RICKETTSIA_SPECIES
)
PANAROO_OUTPUT_DIR = f"{OUTPUT_ROOT_DIR}panaroo_pangenome/"
PANAROO_CORE_GENE_ALIGNMENT = f"{PANAROO_OUTPUT_DIR}core_gene_alignment.aln"
PARSNP_OUTPUT_DIR = f"{OUTPUT_ROOT_DIR}parsnp_Rickettsia"


rule all:
    input:
        #f"{PANAROO_OUTPUT_DIR}gene_presence_absence.csv",
        #f"{PANAROO_OUTPUT_DIR}summary_statistics.txt",
        #f"{PARSNP_OUTPUT_DIR}/output/parsnp.xmfa",
        #"results/variable_targets.csv",
        #"results/rpa_primers.csv",
        #"results/rpa_primers_validated.csv",
        #"results/top_primers.csv",
        "results/final_primer_report.csv"


rule prokka:
    """
    Annotates a single Rickettsia genome using Prokka.
    This rule will be executed for each genome individually.
    """
    input:
        genome = f"{RICKETTSIA_GENOMES_DIR}{{species}}.fna"
    output:
        gff = f"{PROKKA_OUTPUT_DIR}{{species}}/{{species}}.gff",
        faa = f"{PROKKA_OUTPUT_DIR}{{species}}/{{species}}.faa",
        ffn = f"{PROKKA_OUTPUT_DIR}{{species}}/{{species}}.ffn"
    params:
        outdir = f"{PROKKA_OUTPUT_DIR}{{species}}",
        prefix = "{species}"
    threads: 4
    conda: "envs/prokka_env.yaml"
    shell:
        """
        mkdir -p {params.outdir}
        rm -rf {params.outdir}/*

        prokka \\
            --force \\
            --outdir {params.outdir} \\
            --prefix {params.prefix} \\
            --genus Rickettsia \\
            --usegenus \\
            --cpus {threads} \\
            {input.genome}
        """

rule panaroo:
    """
    Performs pangenome analysis on all Prokka-annotated genomes using Panaroo.
    Panaroo is a modern alternative to Roary with better error correction.
    """
    input:
        gff_files = PROKKA_GFF_FILES
    output:
        core_alignment = PANAROO_CORE_GENE_ALIGNMENT,
        gene_presence_absence = f"{PANAROO_OUTPUT_DIR}gene_presence_absence.csv",
        pan_genome_reference = f"{PANAROO_OUTPUT_DIR}pan_genome_reference.fa",
        summary_statistics = f"{PANAROO_OUTPUT_DIR}summary_statistics.txt",
        core_gene_alignment_filtered = f"{PANAROO_OUTPUT_DIR}core_gene_alignment_filtered.aln"
    params:
        output_dir = PANAROO_OUTPUT_DIR
    threads: 8
    conda: "envs/panaroo_env.yaml" 
    shell:
        """
        mkdir -p {params.output_dir}
        rm -rf {params.output_dir}/*

        panaroo -i {input.gff_files} \\
                -o {params.output_dir} \\
                --threads {threads} \\
                -a core \\
                --aligner mafft \\
                --core_threshold 0.90 \\
                --clean-mode strict
        
        echo "Panaroo finished. Check results in {params.output_dir}"
        """

rule parsnp:
    """
    Atlieka greitą branduolio genomo SNP sulyginimą su Parsnp.
    Patikima versija su atskirtais katalogais ir --force-overwrite vėliavėle.
    """
    input:
        reference_genome = f"{RICKETTSIA_GENOMES_DIR}{RICKETTSIA_REFERENCE_GENOME}.fna",
        other_genomes = expand(
            f"{RICKETTSIA_GENOMES_DIR}{{species}}.fna",
            species=[s for s in RICKETTSIA_SPECIES if s != RICKETTSIA_REFERENCE_GENOME]
        )
    output:
        # Rezultatai bus /output/ pakatalogiuose
        xmfa = f"{PARSNP_OUTPUT_DIR}/output/parsnp.xmfa",
        tree = f"{PARSNP_OUTPUT_DIR}/output/parsnp.tree",
        ggr = f"{PARSNP_OUTPUT_DIR}/output/parsnp.ggr"
    params:
        # Svarbiausia dalis: išvesties ir įvesties katalogai yra atskiri
        output_dir = f"{PARSNP_OUTPUT_DIR}/output",
        genomes_dir = f"{PARSNP_OUTPUT_DIR}/genome_links"
    threads: 8
    conda: "envs/parsnp_env.yaml"
    shell:
        """
        # Sukuriame katalogą simbolinėms nuorodoms ir išvalome senas
        mkdir -p {params.genomes_dir}
        find {params.genomes_dir} -type l -delete

        # Sukuriame simbolines nuorodas
        for genome in {input.other_genomes}; do
            ln -sf $(realpath "$genome") {params.genomes_dir}/
        done

        # Paleidžiame Parsnp su --force-overwrite vėliavėle
        # ir atskirais katalogais.
        parsnp -r {input.reference_genome} \\
               -d {params.genomes_dir} \\
               -p {threads} \\
               -o {params.output_dir} \\
               --skip-ani-filter \\
               --force-overwrite
        """

rule find_variable_targets:
    """
    Naudoja find_variable_targets.py skriptą, kad rastų 18 nt sritis,
    kurių panašumas tarp genomų yra apie 70%.
    """
    input:
        partitioned_alignment = f"{PANAROO_OUTPUT_DIR}partitioned_alignment.fasta"
    output:
        candidates_csv = "results/variable_targets.csv"
    conda: "envs/panaroo_env.yaml" # Tariame, kad čia yra pandas ir biopython
    shell:
        """
        python scripts/find_variable_targets.py \\
            {input.partitioned_alignment} \\
            {output.candidates_csv}
        """

rule design_rpa_primers:
    """
    Naudoja rpa_primer_designer.py skriptą, kad sukurtų pradmenų poras
    rastoms kintančioms sritims.
    """
    input:
        targets_csv = "results/variable_targets.csv",
        alignment_fasta = f"{PANAROO_OUTPUT_DIR}partitioned_alignment.fasta"
    output:
        primers_csv = "results/rpa_primers.csv"
    conda: "envs/panaroo_env.yaml"
    shell:
        """
        python scripts/rpa_primer_designer.py \\
            {input.targets_csv} \\
            {input.alignment_fasta} \\
            {output.primers_csv}
        """

rule validate_primers:
    """
    Filtruoja pradmenų kandidatus pagal antrines struktūras, dimerus ir kt.
    """
    input:
        candidates = "results/rpa_primers.csv"
    output:
        validated_primers = "results/rpa_primers_validated.csv"
    conda: "envs/panaroo_env.yaml"
    shell:
        """
        python scripts/validate_primers_comprehensive.py \\
            {input.candidates} \\
            {output.validated_primers}
        """

rule select_top_primers:
    """
    Išrenka po vieną geriausią pradmenų porą kiekvienai unikaliai taikinio pozicijai.
    """
    input:
        validated_primers = "results/rpa_primers_validated.csv"
    output:
        top_primers = "results/top_primers.csv"
    conda: "envs/panaroo_env.yaml"
    shell:
        "python scripts/select_top_primers.py {input.validated_primers} {output.top_primers}"

rule generate_report:
    input:
        top_primers = "results/top_primers.csv",
        alignment = f"{PANAROO_OUTPUT_DIR}partitioned_alignment.fasta"
    output:
        final_report = "results/final_primer_report.csv"
    conda: "envs/panaroo_env.yaml"
    shell:
        "python scripts/generate_final_report.py --primers {input.top_primers} --alignment {input.alignment} --output {output.final_report}"
